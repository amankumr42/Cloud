# -*- coding: utf-8 -*-
"""WorkingWithLogData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u6KXqxjD_dK6TWHWfOJkjlfy8nvnSCL0
"""

#! pip install pip install apache-beam[gcp]

from __future__ import absolute_import

import argparse
import logging

from past.builtins import unicode

import apache_beam as beam
import apache_beam.transforms.window as window
from apache_beam.examples.wordcount_with_metrics import WordExtractingDoFn
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.options.pipeline_options import SetupOptions
from apache_beam.options.pipeline_options import StandardOptions

parser = argparse.ArgumentParser()
parser.add_argument(
      '--input_topic',
      required=True,
      help=(
          'Output path to google cloud storage'))

parser.add_argument(
      '--output_path',
      required=True,
      help=(
          'Output path to google cloud storage'))

path_args, pipeline_args = parser.parse_known_args()
options = PipelineOptions(pipeline_args)


'''def run(argv=None, save_main_session=True):
  """Build and run the pipeline."""
  parser = argparse.ArgumentParser()
  parser.add_argument(
      '--output_path',
      required=True,
      help=(
          'Output path to google cloud storage'))
  group = parser.add_mutually_exclusive_group(required=True)
  group.add_argument(
      '--input_topic',
      help=(
          'Input PubSub topic of the form '
          '"projects/<PROJECT>/topics/<TOPIC>".'))
  group.add_argument(
      '--input_subscription',
      help=(
          'Input PubSub subscription of the form '
          '"projects/<PROJECT>/subscriptions/<SUBSCRIPTION>."'))
  known_args, pipeline_args = parser.parse_known_args(argv)

  # We use the save_main_session option because one or more DoFn's in this
  # workflow rely on global context (e.g., a module imported at module level).
  pipeline_options = PipelineOptions(pipeline_args)
  pipeline_options.view_as(SetupOptions).save_main_session = save_main_session
  pipeline_options.view_as(StandardOptions).streaming = True'''

with beam.Pipeline(options=options) as p:
  '''if path_args.input_subscription:
    message = (
        p 
        | beam.io.ReadFromPubSub(subscription=path_args.input_subscription).with_output_types(bytes)
        )
  else:
    message = (
        p
        | beam.io.ReadFromPubSub(subscription=path_args.input_topic).with_output_types(bytes)
    )'''
  message = (
        p
        | beam.io.ReadFromPubSub(path_args.input_topic).with_output_types(bytes)
    )  
    
  lines = (
      message
      | 'decode' >> beam.Map(lambda x : x.decode('utf-8'))
    )
  
  output_line = (
      lines 
      | 'write to pubsub' >> beam.io.WriteToText(path_args.output_path)
  )

'''
python -m apache_beam.examples.streaming_wordcount \
  --runner DataflowRunner \
  --project YOUR_GCP_PROJECT \
  --region YOUR_GCP_REGION \
  --temp_location gs://YOUR_GCS_BUCKET/tmp/ \
  --input_topic "projects/YOUR_PUBSUB_PROJECT_NAME/topics/YOUR_INPUT_TOPIC" \
  --output_topic "projects/YOUR_PUBSUB_PROJECT_NAME/topics/YOUR_OUTPUT_TOPIC" \
  --streaming
'''
